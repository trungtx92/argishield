"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const httpCode_1 = require("./data/httpCode");
/**
 * @class: create a response message builder, on this class the technical errors, data will become object type
 * @author: Max Le
 */
class Message {
    constructor() {
        this.jsonData = {
            data: null,
            status: 'OK',
            errors: {
                httpCode: 200,
                clientMessage: null,
                technicalErrors: null
            }
        };
        /**
         * @since 1.0.0
         * @method: Add key and value into 'data' object, technical error property will be null when using this function
         * @param {key: string} key the key of the object
         * @param {value: any} value for the key of the object
         * @returns {void} put the key and value into data object
         */
        this.addData = (key, value) => {
            //mark technicalErrors + clientMessage = null
            if (this.jsonData.errors) {
                this.jsonData.errors.technicalErrors = null;
                this.jsonData.errors.clientMessage = null;
            }
            //cloning
            const tData = Object.assign({}, this.jsonData.data);
            tData[key] = value;
            this.jsonData.data = tData;
            return this;
        };
        /**
         * @since 1.1.0
         * @method: Remove key and value from data or technicalErrors object
         * @param {key: string} key the key of the object
         * @param {from: 'data' | 'technicalErrors'} from data or technicalErrors object
         * @returns {void} Remove key and value from data or technicalErrors object
         */
        this.removeFrom = (key, from) => {
            if (this.jsonData.errors && from == 'technicalErrors') {
                delete this.jsonData.errors.technicalErrors[key];
            }
            if (from == 'data') {
                const tData = Object.assign({}, this.jsonData.data);
                delete tData[key];
                this.jsonData.data = tData;
            }
            return this;
        };
        /**
         * @since 1.1.0
         * @method: Add client message to message
         * @param {message: string} clientMessage message that will be seen by client side
         * @returns {void} Add client message to message
         */
        this.clientMessage = (message) => {
            if (this.jsonData.errors) {
                this.jsonData.errors.clientMessage = message;
            }
            return this;
        };
        /**
         * @since 1.0.0
         * @method: Add key and value into 'technicalErrors' object, data property will be null when using this function
         * @param {key: string} key the key of the object
         * @param {value: any} value for the key of the object
         * @returns {void} put the key and value into technicalErrors object
         */
        this.addError = (key, value) => {
            // mark data = null
            this.jsonData.data = null;
            //cloning technicalErrors
            const tError = Object.assign({}, this.jsonData.errors);
            if (tError.technicalErrors) {
                tError.technicalErrors[key] = value;
            }
            else {
                tError.technicalErrors = {};
                tError.technicalErrors[key] = value;
            }
            this.jsonData.errors = tError;
            return this;
        };
        /**
         * @since 1.0.0
         * @param {httpCode?: HttpCode} httpCode, the list of http code is provided on resf.HttpCode
         * @returns {JsonData} returns an object that contains the final message
         */
        this.toOutput = (code) => {
            //add Http code to the message
            this.jsonData.status = httpCode_1.HttpCode[code];
            if (this.jsonData.errors) {
                this.jsonData.errors.httpCode = code;
            }
            return this.jsonData;
        };
    }
}
/**
 * @function: create a response message builder, on this class the technical errors, data will become object type
 */
exports.message = () => {
    return new Message();
};
