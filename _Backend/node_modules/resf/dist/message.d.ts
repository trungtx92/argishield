import { IMessage, JsonData } from './interface';
import { HttpCode } from './data/httpCode';
/**
 * @class: create a response message builder, on this class the technical errors, data will become object type
 * @author: Max Le
 */
declare class Message<T> implements IMessage<{}, {}> {
    private jsonData;
    /**
     * @since 1.0.0
     * @method: Add key and value into 'data' object, technical error property will be null when using this function
     * @param {key: string} key the key of the object
     * @param {value: any} value for the key of the object
     * @returns {void} put the key and value into data object
     */
    addData: (key: string, value: T) => IMessage<{}, {}>;
    /**
     * @since 1.1.0
     * @method: Remove key and value from data or technicalErrors object
     * @param {key: string} key the key of the object
     * @param {from: 'data' | 'technicalErrors'} from data or technicalErrors object
     * @returns {void} Remove key and value from data or technicalErrors object
     */
    removeFrom: (key: string, from: "data" | "technicalErrors") => IMessage<{}, {}>;
    /**
     * @since 1.1.0
     * @method: Add client message to message
     * @param {message: string} clientMessage message that will be seen by client side
     * @returns {void} Add client message to message
     */
    clientMessage: (message: string) => IMessage<{}, {}>;
    /**
     * @since 1.0.0
     * @method: Add key and value into 'technicalErrors' object, data property will be null when using this function
     * @param {key: string} key the key of the object
     * @param {value: any} value for the key of the object
     * @returns {void} put the key and value into technicalErrors object
     */
    addError: (key: string, value: T) => IMessage<{}, {}>;
    /**
     * @since 1.0.0
     * @param {httpCode?: HttpCode} httpCode, the list of http code is provided on resf.HttpCode
     * @returns {JsonData} returns an object that contains the final message
     */
    toOutput: (code: HttpCode) => JsonData<{}, {}>;
}
/**
 * @function: create a response message builder, on this class the technical errors, data will become object type
 */
export declare const message: <T>() => Message<T>;
export {};
